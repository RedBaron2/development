
# AU template: https://github.com/majkinetor/au-packages-template

#version: '{build}'
max_jobs: 1
image: WMF 5
# History plugin requires complete log
#clone_depth: 5
branches:
  only:
  - master
#build:
#  verbosity: minimal

environment:
  # Set au version to use or omit to use the latest. Specify branch name to use development version from Github
  au_version:
  au_push: true
  # Force test: use 1 to test all, or N to split testing into N groups
  au_test_groups: 1

install:
- ps: 'Get-CimInstance win32_operatingsystem -Property Caption, OSArchitecture, Version | fl Caption, OSArchitecture, Version'
#- ps: cinst selenium -y
- ps: $PSVersionTable
- git --version
- choco --version
- ps: |
    git clone -q https://github.com/majkinetor/au.git $Env:TEMP/au
    . "$Env:TEMP/au/scripts/Install-AU.ps1" $Env:au_version

- ps: |
    "Build info"
    '  {0,-20} {1}' -f 'SCHEDULED BUILD:', ($Env:APPVEYOR_SCHEDULED_BUILD -eq 'true')
    '  {0,-20} {1}' -f 'FORCED BUILD:'   , ($Env:APPVEYOR_FORCED_BUILD    -eq 'true')
    '  {0,-20} {1}' -f 'RE BUILD:'       , ($Env:APPVEYOR_RE_BUILD        -eq 'true')

# Uncomment the below line if you are using any of the functions from chocolatey-core.extension - https://chocolatey.org/packages/chocolatey-core.extension. Ensure you also have it listed in your package's dependencies
# - cinst chocolatey-core.extension
    
build_script:
- ps: |

function Get-KasperskyPackageName() {
param(
     [string]$a
)

$PreURL = 'https://usa.kaspersky.com/downloads/thank-you'
switch -w ( $a ) {

    'kfa' {
        $PackageUrl = "${PreURL}/free-antivirus-download"
    }
    'kav' {
        $PackageUrl = "${PreURL}/antivirus"
    }
    'kts' {
        $PackageUrl = "${PreURL}/total-security"
    }
    'kis' {
        $PackageUrl = "${PreURL}/internet-security"
    }



}

return $PackageUrl

}

function Get-KasperskyUpdates {
 param(
    [string]$package,
    [string]$Title
 )

 
$regex = '([\d]{0,2}[\.][\d]{0,2}[\.][\d]{0,2}[\.][\d]{0,3})'
$rev_regex = '([\d+]{5})';
$url = Get-KasperskyPackageName $package
if ( $url -match 'free' ) { $wait = 3 } else { $wait = 4 }
$ie = New-Object -comobject InternetExplorer.Application
$ie.Navigate2($url) 
$ie.Visible = $false
while($ie.ReadyState -ne $wait) {
 start-sleep -Seconds 20
} 
    foreach ( $_ in $ie.Document.getElementsByTagName("a") ) {
     $url = $_.href;
         if ( $url -match $regex) {
            $yes = $url | select -last 1
            $version = $Matches[0]
            $the_match = $yes -match( $rev_regex );
            $revision = $Matches[0];
            break;
        }
    }

$ie.quit()
$version = $version + $revision


@{    
PackageName = $package
Title = $Title
fileType = 'exe'
Version = $version
URL32 = $yes
    }

}
Get-KasperskyUpdates -package kav -Title "Kaspersky Anti-Virus"
- ps: |
    $ErrorActionPreference = 'Continue'

    if ($Env:APPVEYOR_PROJECT_NAME  -like '*test*') { ./test_all.ps1 "random $Env:au_test_groups"; return }

    if ( ($Env:APPVEYOR_SCHEDULED_BUILD -ne 'true') -and ($Env:APPVEYOR_FORCED_BUILD -ne 'true') ) {
        switch -regex ($Env:APPVEYOR_REPO_COMMIT_MESSAGE)
        {
            '\[AU (.+?)\]'   { $forced = $Matches[1] }

            '\[PUSH (.+?)\]' {
                $packages = $Matches[1] -split ' '
                Write-Host "PUSHING PACKAGES: $packages"
                foreach ($package in $packages) {
                    Write-Host ("{0}`n{1}`n" -f ('-'*60), "PACKAGE: $package")
                    $package_dir = ls -recurse | ? { $_.Name -eq "$package.nuspec"} | select -First 1 | % Directory
                    if (!$package_dir) { Write-Warning "Can't find package '$package'"; continue }
                    pushd $package_dir
                      if (Test-Path update.ps1 -ea 0) { ./update.ps1 }
                      choco pack; Push-Package;
                    popd
                }
                return
            }
        }
    }

    ./update_all.ps1 -ForcedPackages $forced
    #cd ../automatic/windows10-media-creation-tool
    #./update.ps1
    #7z a au_temp.zip $Env:TEMP\chocolatey\au\*
    7z a AU_Updates_temp.zip $Env:TEMP\AU_Updates\APPVEYOR-VM\*

artifacts:
- path: '**\*.nupkg'
- path: '**\*.zip'
- path: '**\*.log'
- path: '**\*.json'

notifications:
- provider: Email
  to: $(mail_user)
  on_build_success: false
  on_build_failure: true
  on_build_status_changed: true

#on_finish:
#- ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
